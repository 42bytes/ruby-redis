This project was started because I needed an authenticating and routable
proxy for Redis.  Special attention was paid to performance of the basic
Redis protocol.  All of the magic is in buftok.rb.  This same parser can
be used for both clients and servers/proxies/routers.

Performance considerations:

Ruby 1.9.2 is the fastest in all benchmarks.  Ruby 1.8 is slower, but
usable.  The client under JRuby should be faster than any alternative.
The server under JRuby performs poorly.  Rubinius 1.2 and 2.0 did not
perform well in any tests.

If the hiredis gem is compatible with your platform, you can use it
for the client instead of buftok.rb.


Client benchmark:
rr+hiredis  : Ruby Redis with hiredis enabled, Ruby 1.9.2
ruby-redis  : Ruby Redis on Ruby 1.9.2
rr+jruby16  : Ruby Redis on JRuby 1.6.3
rr+rubinius : Ruby Redis on Rubinius 1.2 (2.0 is even slower)
em-hiredis  : on Ruby 1.9.2
em-redis    : on Ruby 1.9.2

             gets size       user     system      total        real
             
rr+hiredis  75000  20b   1.760000   0.090000   1.850000 (  1.873600)
ruby-redis  75000  20b   2.250000   0.110000   2.360000 (  2.432902)
rr+jruby16  75000  20b   2.869000   0.000000   2.869000 (  2.869000)
rr+rubinius 75000  20b   4.393039   0.091899   4.484938 (  5.023466)
em-hiredis  75000  20b   1.550000   0.090000   1.640000 (  1.669631)
em-redis    75000  20b   2.570000   0.790000   3.360000 (  3.719082)

rr+hiredis  10000  64k   2.930000   0.400000   3.330000 (  3.456874)
ruby-redis  10000  64k   4.930000   0.540000   5.470000 (  5.588033)
rr+jruby16  10000  64k   6.588000   0.000000   6.588000 (  6.588000)
rr+rubinius 10000  64k  15.951343   1.381539  17.332882 ( 17.970684)
em-hiredis  10000  64k   2.770000   0.390000   3.160000 (  3.264862)
em-redis    10000  64k   4.170000   1.760000   5.930000 (  6.123727)

rr+hiredis    250   1m   0.730000   0.150000   0.880000 (  0.938491)
ruby-redis    250   1m   0.760000   0.190000   0.950000 (  0.974382)
rr+jruby16    250   1m   1.571000   0.000000   1.571000 (  1.571000)
rr+rubinius   250   1m   4.845378   0.372637   5.218015 (  5.762100)
em-hiredis    250   1m   0.730000   0.160000   0.890000 (  0.906150)
em-redis      250   1m  11.350000  10.720000  22.070000 ( 22.677349)


The server has the complete command set except for anything that needs
save and load to work.  Having a complete command set allows me to
extensively test buftok.rb against the C Redis test suite (in TCL).

I'm available to help if anyone wants to tackle saving and loading.
Replication is pretty easy to add once that is working.  There's no
technical reason this hasn't been done, it's just a very low priority.
These features are all that we need to have a complete server in Ruby.

Server benchmark:
Note that this is 32-bit Ruby vs 32-bit Redis.
EC2 ami-2a1fec43 on c1.medium
Ruby 1.9.2-p180
1000 parallel clients 
8000 bytes payload
50000 keyspace   

******* ruby-redis *******             ******* redis 2.2.7 *******

====== PING (inline) ======            ====== PING (inline) ======
  10000 completed in 0.65 seconds        10000 completed in 0.58 seconds
100.00% <= 133 milliseconds            100.00% <= 42 milliseconds
15479.88 requests per second           17271.16 requests per second
                                       
====== PING ======                     ====== PING ======
  10000 completed in 0.64 seconds        10000 completed in 0.63 seconds
100.00% <= 99 milliseconds             100.00% <= 84 milliseconds
15576.32 requests per second           15822.79 requests per second
                                       
====== MSET (10 keys) ======           ====== MSET (10 keys) ======
  10000 completed in 9.10 seconds        10000 completed in 7.59 seconds
100.00% <= 1469 milliseconds           100.00% <= 841 milliseconds
1098.90 requests per second            1316.83 requests per second
                                       
====== SET ======                      ====== SET ======
  10000 completed in 1.44 seconds        10000 completed in 0.95 seconds
100.00% <= 185 milliseconds            100.00% <= 76 milliseconds
6968.64 requests per second            10504.20 requests per second
                                       
====== GET ======                      ====== GET ======
  10000 completed in 1.25 seconds        10000 completed in 1.36 seconds
100.00% <= 205 milliseconds            100.00% <= 104 milliseconds
7974.48 requests per second            7352.94 requests per second
                                       
====== INCR ======                     ====== INCR ======
  10000 completed in 0.75 seconds        10000 completed in 0.60 seconds
100.00% <= 125 milliseconds            100.00% <= 43 milliseconds
13280.21 requests per second           16528.93 requests per second
