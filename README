This project was started because I needed an authenticating and routable
proxy for Redis.  Special attention was paid to performance of the basic
Redis protocol.  All of the magic is in buftok.rb.  This same parser can
be used for both clients and servers/proxies/routers.

The client will be completed soon.  All commands work except pubsub and
multi/exec, which I'm implementing now.  The blocking client used by
tests will be brought into the main library for general use.

The server has the complete command set except for anything that needs
save and load to work.  Having a complete command set allows me to
extensively test buftok.rb against the C Redis test suite (in TCL).

I'm available to help if anyone wants to tackle saving and loading.
Replication is pretty easy to add once that is working.  There's no
technical reason this hasn't been done, it's just a very low priority.
These features are all that we need to have a complete server in Ruby.

Client benchmark:
The em-redis client can be faster when the payload is small enough to
not need reassembly.  Once you include data, there is no contest.
My laptop with Ruby 1.9 performing redis get operations to itself:

           gets  size       user     system      total        real
em-redis   75000  20b   2.570000   0.790000   3.360000 (  3.719082)
ruby-redis 75000  20b   3.390000   0.410000   3.800000 (  3.955804)
em-redis   20000   8k   1.560000   0.950000   2.510000 (  2.674317)
ruby-redis 20000   8k   1.560000   0.510000   2.070000 (  2.241403)
em-redis   10000  64k   4.170000   1.760000   5.930000 (  6.123727)
ruby-redis 10000  64k   1.780000   0.780000   2.560000 (  2.710464)
em-redis   250     1m  11.350000  10.720000  22.070000 ( 22.677349)
ruby-redis 250     1m   0.370000   0.350000   0.720000 (  0.750893)


Server benchmark:
Note that this is 32-bit Ruby vs 32-bit Redis.
EC2 ami-2a1fec43 on c1.medium
Ruby 1.9.2-p180
1000 parallel clients 
8000 bytes payload
50000 keyspace   

******* ruby-redis *******             ******* redis 2.2.7 *******

====== PING (inline) ======            ====== PING (inline) ======
  10000 completed in 0.65 seconds        10000 completed in 0.58 seconds
100.00% <= 133 milliseconds            100.00% <= 42 milliseconds
15479.88 requests per second           17271.16 requests per second
                                       
====== PING ======                     ====== PING ======
  10000 completed in 0.64 seconds        10000 completed in 0.63 seconds
100.00% <= 99 milliseconds             100.00% <= 84 milliseconds
15576.32 requests per second           15822.79 requests per second
                                       
====== MSET (10 keys) ======           ====== MSET (10 keys) ======
  10000 completed in 9.10 seconds        10000 completed in 7.59 seconds
100.00% <= 1469 milliseconds           100.00% <= 841 milliseconds
1098.90 requests per second            1316.83 requests per second
                                       
====== SET ======                      ====== SET ======
  10000 completed in 1.44 seconds        10000 completed in 0.95 seconds
100.00% <= 185 milliseconds            100.00% <= 76 milliseconds
6968.64 requests per second            10504.20 requests per second
                                       
====== GET ======                      ====== GET ======
  10000 completed in 1.25 seconds        10000 completed in 1.36 seconds
100.00% <= 205 milliseconds            100.00% <= 104 milliseconds
7974.48 requests per second            7352.94 requests per second
                                       
====== INCR ======                     ====== INCR ======
  10000 completed in 0.75 seconds        10000 completed in 0.60 seconds
100.00% <= 125 milliseconds            100.00% <= 43 milliseconds
13280.21 requests per second           16528.93 requests per second
